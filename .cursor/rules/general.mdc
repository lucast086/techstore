---
description: 
globs: 
alwaysApply: true
---
# General Rules

## CORE PRINCIPLES
These rules define the foundation of code development in this project:

### R1: CLEAN AND CONCISE CODE
- **No unnecessary comments**
  - Code should be self-explanatory
  - Only document complex decisions or non-obvious logic
  - Avoid comments that repeat what the code already says

### R2: PROGRESSIVE DEVELOPMENT
- **No placeholder functionalities**
  - Implement complete and usable features
  - Avoid code marked "to be completed later", "for future use"
  - Each commit should add real value to the project

### R3: STANDARDS AND DOCUMENTATION
- **Follow official rules and documentation**
  - Follow language-specific style guides
  - Use standard patterns when available

### R4: ATOMIC DEVELOPMENT
- **Develop in atomic steps**
  - Small and verifiable changes
  - One change = one specific functionality
  - Facilitate code review and testing

### R5: VERSIONING
- **Document changes by version**
  - Use Git Flow for branch management
  - Keep CHANGELOG.md updated
  - Version following Semantic Versioning (SemVer)

## DOCUMENTATION GUIDELINES

### R6: DOCUMENTATION LOCATION
- **All documentation in /workspace/docs**
  - Technical documentation
  - Development plans
  - Architecture diagrams
  - API specifications
  - User guides
  - Never place documentation files within app directories

### R7: FEATURE PLANNING
- **Document app plans before implementation**
  - Create a plan document for each app/module
  - Include detailed implementation steps
  - Document design decisions and trade-offs
  - Reference relevant patterns and standards

### R8: PENDING FEATURES
- **Register pending features in docs/pending_features.md**
  - Document identified features for future implementation
  - Include brief description and justification
  - Categorize by module/functionality
  - Do not include pending features in code comments

### R9: DOCUMENTATION FORMAT
- **Use Markdown for all documentation**
  - Use headings and sections for organization
  - Include code examples where appropriate
  - Add diagrams when needed for clarity
  - Keep documentation updated with code changes

### R10: MULTILINGUAL APPROACH
- **English as primary language for documentation**
  - Technical documentation in English
  - API documentation in English
  - UI text in Spanish with internationalization support
  - Code, variables, and comments in English

### R11: PRE-COMMIT COMPLIANCE RULES

- Every Python file must have a module docstring and docstrings for all public classes.
- Maximum line length: 100 characters (Python and scripts).
- Use isort (Black profile) to order imports.
- No trailing whitespace at the end of any line.
- All files must end with a single blank line.
- Do not add files larger than 10MB.
- Use Prettier for JS, TS, JSON, CSS, YAML files.
- All YAML files must be valid.

### R12: DEVELOPMENT PATH
- **Test-Driven Development Workflow**
    
1. Write a failing test for the first step of the feature you want to implement
2. Run the test to verify it fails for the expected reason
3. Implement the minimum code necessary to make the test pass
4. Run the test to verify it passes
5. Refactor the code while ensuring the tests continue to pass

### R13: MULTITENANT DEVELOPMENT RULES
- **Always consider tenant context**
    - Every database operation must be tenant-aware
    - Use `schema_context` for explicit tenant operations
    - Never assume global context for tenant-specific data

- **Tenant Isolation**
    - Always verify tenant context in requests
    - Never mix data between tenants
    - Use tenant-specific models appropriately
    - Implement proper tenant validation in all endpoints

- **Testing Requirements**
    - Use `TenantTestCase` for tenant-specific tests
    - Test cross-tenant isolation
    - Verify tenant context in all API endpoints
    - Include tenant validation in security tests

- **API Development**
    - All endpoints must be tenant-aware
    - Include tenant validation in serializers
    - Use proper tenant middleware
    - Document tenant-specific behavior

- **Security Considerations**
    - Validate tenant access in all operations
    - Prevent cross-tenant data access
    - Implement proper tenant-based permissions
    - Log tenant-specific actions

- **Code Review Checklist**
    - Verify tenant context handling
    - Check for proper schema usage
    - Ensure tenant isolation
    - Validate tenant-specific security 