Presentaicion de proyecto


configuracion de dev container
configuracion de cursor rules.

config de bd
config de tenant
config de user management

configuracion proyecto test.

migrations 
role permision configuration
admin configuration

configuracion de pagina login front
configuraciuon de login back


configuracion de auth por supabase

1- some aclarations:

  *  guide me trough  -- No clear data migration strategy for schema updates across tenants
                      -- Limited discussion of security measures (rate limiting, API authentication)

4- Implement the following things:
   COMPLETE a- simplify the auth with Django's built-in system
    b- Create a simple API endpoint for user login/logout
      tests
    c- Build a basic frontend login screen
    
go one step at the time.








python manage.py makemigrations

psql -h db -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'techstore_db';" && psql -h db -U postgres -c "DROP DATABASE techstore_db;" && psql -h db -U postgres -c "CREATE DATABASE techstore_db;"

python manage.py migrate tenants

python manage.py init_public_tenant

python manage.py migrate_schemas --shared

python manage.py migrate users     

python manage.py create_test_tenant
